// Generated by typings
// Source: node_modules/ng2-file-upload/file-upload/file-select.directive.d.ts
declare module '~ng2-file-upload/file-upload/file-select.directive' {
import { ElementRef } from '@angular/core';
import { FileUploader } from '~ng2-file-upload/file-upload/file-uploader.class';
export class FileSelectDirective {
    uploader: FileUploader;
    protected element: ElementRef;
    constructor(element: ElementRef);
    getOptions(): any;
    getFilters(): any;
    isEmptyAfterSelection(): boolean;
    onChange(): any;
}
}
declare module 'ng2-file-upload/file-upload/file-select.directive' {
export * from '~ng2-file-upload/file-upload/file-select.directive';
}

// Generated by typings
// Source: node_modules/ng2-file-upload/file-upload/file-drop.directive.d.ts
declare module '~ng2-file-upload/file-upload/file-drop.directive' {
import { EventEmitter, ElementRef } from '@angular/core';
import { FileUploader } from '~ng2-file-upload/file-upload/file-uploader.class';
export class FileDropDirective {
    uploader: FileUploader;
    fileOver: EventEmitter<any>;
    onFileDrop: EventEmitter<File[]>;
    protected element: ElementRef;
    constructor(element: ElementRef);
    getOptions(): any;
    getFilters(): any;
    onDrop(event: any): void;
    onDragOver(event: any): void;
    onDragLeave(event: any): any;
    protected _getTransfer(event: any): any;
    protected _preventAndStop(event: any): any;
    protected _haveFiles(types: any): any;
}
}
declare module 'ng2-file-upload/file-upload/file-drop.directive' {
export * from '~ng2-file-upload/file-upload/file-drop.directive';
}

// Generated by typings
// Source: node_modules/ng2-file-upload/file-upload/file-uploader.class.d.ts
declare module '~ng2-file-upload/file-upload/file-uploader.class' {
import { FileLikeObject } from '~ng2-file-upload/file-upload/file-like-object.class';
import { FileItem } from '~ng2-file-upload/file-upload/file-item.class';
export interface Headers {
    name: string;
    value: string;
}
export type ParsedResponseHeaders = {
    [headerFieldName: string]: string;
};
export type FilterFunction = {
    name: string;
    fn: (item?: FileLikeObject, options?: FileUploaderOptions) => boolean;
};
export interface FileUploaderOptions {
    allowedMimeType?: Array<string>;
    allowedFileType?: Array<string>;
    autoUpload?: boolean;
    isHTML5?: boolean;
    filters?: Array<FilterFunction>;
    headers?: Array<Headers>;
    method?: string;
    authToken?: string;
    maxFileSize?: number;
    queueLimit?: number;
    removeAfterUpload?: boolean;
    url?: string;
    disableMultipart?: boolean;
    itemAlias?: string;
    authTokenHeader?: string;
    additionalParameter?: {
        [key: string]: any;
    };
}
export class FileUploader {
    authToken: string;
    isUploading: boolean;
    queue: Array<FileItem>;
    progress: number;
    _nextIndex: number;
    autoUpload: any;
    authTokenHeader: string;
    options: FileUploaderOptions;
    protected _failFilterIndex: number;
    constructor(options: FileUploaderOptions);
    setOptions(options: FileUploaderOptions): void;
    addToQueue(files: File[], options?: FileUploaderOptions, filters?: FilterFunction[] | string): void;
    removeFromQueue(value: FileItem): void;
    clearQueue(): void;
    uploadItem(value: FileItem): void;
    cancelItem(value: FileItem): void;
    uploadAll(): void;
    cancelAll(): void;
    isFile(value: any): boolean;
    isFileLikeObject(value: any): boolean;
    getIndexOfItem(value: any): number;
    getNotUploadedItems(): Array<any>;
    getReadyItems(): Array<any>;
    destroy(): void;
    onAfterAddingAll(fileItems: any): any;
    onBuildItemForm(fileItem: FileItem, form: any): any;
    onAfterAddingFile(fileItem: FileItem): any;
    onWhenAddingFileFailed(item: FileLikeObject, filter: any, options: any): any;
    onBeforeUploadItem(fileItem: FileItem): any;
    onProgressItem(fileItem: FileItem, progress: any): any;
    onProgressAll(progress: any): any;
    onSuccessItem(item: FileItem, response: string, status: number, headers: ParsedResponseHeaders): any;
    onErrorItem(item: FileItem, response: string, status: number, headers: ParsedResponseHeaders): any;
    onCancelItem(item: FileItem, response: string, status: number, headers: ParsedResponseHeaders): any;
    onCompleteItem(item: FileItem, response: string, status: number, headers: ParsedResponseHeaders): any;
    onCompleteAll(): any;
    _mimeTypeFilter(item: FileLikeObject): boolean;
    _fileSizeFilter(item: FileLikeObject): boolean;
    _fileTypeFilter(item: FileLikeObject): boolean;
    _onErrorItem(item: FileItem, response: string, status: number, headers: ParsedResponseHeaders): void;
    _onCompleteItem(item: FileItem, response: string, status: number, headers: ParsedResponseHeaders): void;
    protected _headersGetter(parsedHeaders: ParsedResponseHeaders): any;
    protected _xhrTransport(item: FileItem): any;
    protected _getTotalProgress(value?: number): number;
    protected _getFilters(filters: FilterFunction[] | string): FilterFunction[];
    protected _render(): any;
    protected _queueLimitFilter(): boolean;
    protected _isValidFile(file: FileLikeObject, filters: FilterFunction[], options: FileUploaderOptions): boolean;
    protected _isSuccessCode(status: number): boolean;
    protected _transformResponse(response: string, headers: ParsedResponseHeaders): string;
    protected _parseHeaders(headers: string): ParsedResponseHeaders;
    protected _onWhenAddingFileFailed(item: FileLikeObject, filter: any, options: any): void;
    protected _onAfterAddingFile(item: FileItem): void;
    protected _onAfterAddingAll(items: any): void;
    protected _onBeforeUploadItem(item: FileItem): void;
    protected _onBuildItemForm(item: FileItem, form: any): void;
    protected _onProgressItem(item: FileItem, progress: any): void;
    protected _onSuccessItem(item: FileItem, response: string, status: number, headers: ParsedResponseHeaders): void;
    protected _onCancelItem(item: FileItem, response: string, status: number, headers: ParsedResponseHeaders): void;
}
}
declare module 'ng2-file-upload/file-upload/file-uploader.class' {
export * from '~ng2-file-upload/file-upload/file-uploader.class';
}

// Generated by typings
// Source: node_modules/ng2-file-upload/file-upload/file-item.class.d.ts
declare module '~ng2-file-upload/file-upload/file-item.class' {
import { FileLikeObject } from '~ng2-file-upload/file-upload/file-like-object.class';
import { FileUploader, ParsedResponseHeaders, FileUploaderOptions } from '~ng2-file-upload/file-upload/file-uploader.class';
export class FileItem {
    file: FileLikeObject;
    _file: File;
    alias: string;
    url: string;
    method: string;
    headers: any;
    withCredentials: boolean;
    formData: any;
    isReady: boolean;
    isUploading: boolean;
    isUploaded: boolean;
    isSuccess: boolean;
    isCancel: boolean;
    isError: boolean;
    progress: number;
    index: number;
    _xhr: XMLHttpRequest;
    _form: any;
    protected uploader: FileUploader;
    protected some: File;
    protected options: FileUploaderOptions;
    constructor(uploader: FileUploader, some: File, options: FileUploaderOptions);
    upload(): void;
    cancel(): void;
    remove(): void;
    onBeforeUpload(): void;
    onBuildForm(form: any): any;
    onProgress(progress: number): any;
    onSuccess(response: string, status: number, headers: ParsedResponseHeaders): any;
    onError(response: string, status: number, headers: ParsedResponseHeaders): any;
    onCancel(response: string, status: number, headers: ParsedResponseHeaders): any;
    onComplete(response: string, status: number, headers: ParsedResponseHeaders): any;
    _onBeforeUpload(): void;
    _onBuildForm(form: any): void;
    _onProgress(progress: number): void;
    _onSuccess(response: string, status: number, headers: ParsedResponseHeaders): void;
    _onError(response: string, status: number, headers: ParsedResponseHeaders): void;
    _onCancel(response: string, status: number, headers: ParsedResponseHeaders): void;
    _onComplete(response: string, status: number, headers: ParsedResponseHeaders): void;
    _prepareToUploading(): void;
}
}
declare module 'ng2-file-upload/file-upload/file-item.class' {
export * from '~ng2-file-upload/file-upload/file-item.class';
}

// Generated by typings
// Source: node_modules/ng2-file-upload/file-upload/file-like-object.class.d.ts
declare module '~ng2-file-upload/file-upload/file-like-object.class' {
export class FileLikeObject {
    lastModifiedDate: any;
    size: any;
    type: string;
    name: string;
    constructor(fileOrInput: any);
    _createFromFakePath(path: string): void;
    _createFromObject(object: {
        size: number;
        type: string;
        name: string;
    }): void;
}
}
declare module 'ng2-file-upload/file-upload/file-like-object.class' {
export * from '~ng2-file-upload/file-upload/file-like-object.class';
}

// Generated by typings
// Source: node_modules/ng2-file-upload/file-upload/file-upload.module.d.ts
declare module '~ng2-file-upload/file-upload/file-upload.module' {
export class FileUploadModule {
}
}
declare module 'ng2-file-upload/file-upload/file-upload.module' {
export * from '~ng2-file-upload/file-upload/file-upload.module';
}

// Generated by typings
// Source: node_modules/ng2-file-upload/index.d.ts
declare module '~ng2-file-upload/index' {
export * from '~ng2-file-upload/file-upload/file-select.directive';
export * from '~ng2-file-upload/file-upload/file-drop.directive';
export * from '~ng2-file-upload/file-upload/file-uploader.class';
export * from '~ng2-file-upload/file-upload/file-item.class';
export * from '~ng2-file-upload/file-upload/file-like-object.class';
export { FileUploadModule } from '~ng2-file-upload/file-upload/file-upload.module';
}
declare module 'ng2-file-upload/index' {
export * from '~ng2-file-upload/index';
}
declare module 'ng2-file-upload' {
export * from '~ng2-file-upload/index';
}
