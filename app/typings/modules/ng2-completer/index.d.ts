// Generated by typings
// Source: node_modules/ng2-completer/ng2-completer.module.d.ts
declare module '~ng2-completer/ng2-completer.module' {
export class Ng2CompleterModule {
}
}
declare module 'ng2-completer/ng2-completer.module' {
export * from '~ng2-completer/ng2-completer.module';
}

// Generated by typings
// Source: node_modules/ng2-completer/components/completer-cmp.d.ts
declare module '~ng2-completer/components/completer-cmp' {
import { AfterViewChecked, ChangeDetectorRef, EventEmitter, OnInit, AfterViewInit, ElementRef } from '@angular/core';
import { ControlValueAccessor, FormControl } from '@angular/forms';
import { CtrCompleter } from '~ng2-completer/directives/ctr-completer';
import { CompleterData } from '~ng2-completer/services/completer-data';
import { CompleterService } from '~ng2-completer/services/completer-service';
import { CompleterItem } from '~ng2-completer/components/completer-item';
import 'rxjs/add/operator/catch';
export class CompleterCmp implements OnInit, ControlValueAccessor, AfterViewChecked, AfterViewInit {
    private completerService;
    private cdr;
    dataService: CompleterData;
    inputName: string;
    inputId: string;
    pause: number;
    minSearchLength: number;
    maxChars: number;
    overrideSuggested: boolean;
    clearSelected: boolean;
    clearUnselected: boolean;
    fillHighlighted: boolean;
    placeholder: string;
    matchClass: string;
    fieldTabindex: number;
    autoMatch: boolean;
    disableInput: boolean;
    inputClass: string;
    autofocus: boolean;
    openOnFocus: boolean;
    openOnClick: boolean;
    selectOnClick: boolean;
    initialValue: any;
    autoHighlight: boolean;
    selected: EventEmitter<CompleterItem>;
    highlighted: EventEmitter<CompleterItem>;
    blurEvent: EventEmitter<void>;
    click: EventEmitter<void>;
    focusEvent: EventEmitter<void>;
    opened: EventEmitter<boolean>;
    keyup: EventEmitter<any>;
    keydown: EventEmitter<any>;
    completer: CtrCompleter;
    ctrInput: ElementRef;
    searchStr: string;
    control: FormControl;
    displaySearching: boolean;
    displayNoResults: boolean;
    _textNoResults: string;
    _textSearching: string;
    private _onTouchedCallback;
    private _onChangeCallback;
    private _focus;
    private _open;
    constructor(completerService: CompleterService, cdr: ChangeDetectorRef);
    value: any;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    onTouched(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    datasource: CompleterData | string | Array<any>;
    textNoResults: string;
    textSearching: string;
    ngOnInit(): void;
    onBlur(): void;
    onFocus(): void;
    onClick(event: any): void;
    onKeyup(event: any): void;
    onKeydown(event: any): void;
    onChange(value: string): void;
    open(): void;
    close(): void;
    focus(): void;
    blur(): void;
    isOpen(): boolean;
}
}
declare module 'ng2-completer/components/completer-cmp' {
export * from '~ng2-completer/components/completer-cmp';
}

// Generated by typings
// Source: node_modules/ng2-completer/components/completer-list-item-cmp.d.ts
declare module '~ng2-completer/components/completer-list-item-cmp' {
import { OnInit } from '@angular/core';
export interface MatchPart {
    isMatch: boolean;
    text: string;
}
export class CompleterListItemCmp implements OnInit {
    text: string;
    searchStr: string;
    matchClass: string;
    type: string;
    parts: MatchPart[];
    ngOnInit(): void;
}
}
declare module 'ng2-completer/components/completer-list-item-cmp' {
export * from '~ng2-completer/components/completer-list-item-cmp';
}

// Generated by typings
// Source: node_modules/ng2-completer/services/completer-service.d.ts
declare module '~ng2-completer/services/completer-service' {
import { Observable } from 'rxjs/Observable';
import { LocalData } from '~ng2-completer/services/local-data';
import { RemoteData } from '~ng2-completer/services/remote-data';
export class CompleterService {
    private localDataFactory;
    private remoteDataFactory;
    constructor(localDataFactory: any, remoteDataFactory: any);
    local(data: any[] | Observable<any>, searchFields?: string | null, titleField?: string | null): LocalData;
    remote(url: string | null, searchFields?: string | null, titleField?: string | null): RemoteData;
}
}
declare module 'ng2-completer/services/completer-service' {
export * from '~ng2-completer/services/completer-service';
}

// Generated by typings
// Source: node_modules/ng2-completer/services/completer-data.d.ts
declare module '~ng2-completer/services/completer-data' {
import { EventEmitter } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { CompleterItem } from '~ng2-completer/components/completer-item';
export interface CompleterData extends Observable<CompleterItem[] | null> {
    dataSourceChange?: EventEmitter<void>;
    search(term: string): void;
    cancel(): void;
    convertToItem?(data: any): CompleterItem | null;
}
}
declare module 'ng2-completer/services/completer-data' {
export * from '~ng2-completer/services/completer-data';
}

// Generated by typings
// Source: node_modules/ng2-completer/services/completer-data-factory.d.ts
declare module '~ng2-completer/services/completer-data-factory' {
import { Http } from '@angular/http';
import { LocalData } from '~ng2-completer/services/local-data';
import { RemoteData } from '~ng2-completer/services/remote-data';
export function localDataFactory(): () => LocalData;
export function remoteDataFactory(http: Http): () => RemoteData;
export let LocalDataFactoryProvider: {
    provide: typeof LocalData;
    useFactory: () => () => LocalData;
};
export let RemoteDataFactoryProvider: {
    provide: typeof RemoteData;
    useFactory: (http: Http) => () => RemoteData;
    deps: typeof Http[];
};
}
declare module 'ng2-completer/services/completer-data-factory' {
export * from '~ng2-completer/services/completer-data-factory';
}

// Generated by typings
// Source: node_modules/ng2-completer/components/completer-item.d.ts
declare module '~ng2-completer/components/completer-item' {
export interface CompleterItem {
    title: string;
    description?: string;
    image?: string;
    originalObject: any;
}
}
declare module 'ng2-completer/components/completer-item' {
export * from '~ng2-completer/components/completer-item';
}

// Generated by typings
// Source: node_modules/ng2-completer/services/local-data.d.ts
declare module '~ng2-completer/services/local-data' {
import { EventEmitter } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/catch';
import { CompleterBaseData } from '~ng2-completer/services/completer-base-data';
import { CompleterItem } from '~ng2-completer/components/completer-item';
export class LocalData extends CompleterBaseData {
    dataSourceChange: EventEmitter<void>;
    private _data;
    private savedTerm;
    constructor();
    data(data: any[] | Observable<any[]>): this;
    search(term: string): void;
    convertToItem(data: any): CompleterItem | null;
}
}
declare module 'ng2-completer/services/local-data' {
export * from '~ng2-completer/services/local-data';
}

// Generated by typings
// Source: node_modules/ng2-completer/services/remote-data.d.ts
declare module '~ng2-completer/services/remote-data' {
import { EventEmitter } from '@angular/core';
import { Http, Headers, RequestOptions } from '@angular/http';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/catch';
import { CompleterBaseData } from '~ng2-completer/services/completer-base-data';
import { CompleterItem } from '~ng2-completer/components/completer-item';
export class RemoteData extends CompleterBaseData {
    private http;
    dataSourceChange: EventEmitter<void>;
    private _remoteUrl;
    private remoteSearch;
    private _urlFormater;
    private _dataField;
    private _headers;
    private _requestOptions;
    constructor(http: Http);
    remoteUrl(remoteUrl: string): this;
    urlFormater(urlFormater: (term: string) => string): void;
    dataField(dataField: string): void;
    /**
     * @deprecated Please use the requestOptions to pass headers with the search request
     */
    headers(headers: Headers): void;
    requestOptions(requestOptions: RequestOptions): void;
    search(term: string): void;
    cancel(): void;
    convertToItem(data: any): CompleterItem | null;
}
}
declare module 'ng2-completer/services/remote-data' {
export * from '~ng2-completer/services/remote-data';
}

// Generated by typings
// Source: node_modules/ng2-completer/services/completer-base-data.d.ts
declare module '~ng2-completer/services/completer-base-data' {
import { Subject } from 'rxjs/Subject';
import { CompleterItem } from '~ng2-completer/components/completer-item';
import { CompleterData } from '~ng2-completer/services/completer-data';
export abstract class CompleterBaseData extends Subject<CompleterItem[] | null> implements CompleterData {
    protected _searchFields: string;
    protected _titleField: string;
    protected _descriptionField: string;
    protected _imageField: string;
    constructor();
    abstract search(term: string): void;
    cancel(): void;
    searchFields(searchFields: string): this;
    titleField(titleField: string): this;
    descriptionField(descriptionField: string): this;
    imageField(imageField: string): this;
    convertToItem(data: any): CompleterItem | null;
    protected extractMatches(data: any[], term: string): any[];
    protected extractTitle(item: any): any;
    protected extractValue(obj: any, key: string | null): any;
    protected processResults(matches: string[]): CompleterItem[];
}
}
declare module 'ng2-completer/services/completer-base-data' {
export * from '~ng2-completer/services/completer-base-data';
}

// Generated by typings
// Source: node_modules/ng2-completer/directives/ctr-completer.d.ts
declare module '~ng2-completer/directives/ctr-completer' {
import { EventEmitter } from '@angular/core';
import { CompleterItem } from '~ng2-completer/components/completer-item';
export interface CompleterList {
    search(term: string): void;
    open(): void;
    isOpen(open: boolean): void;
    clear(): void;
}
export interface CompleterDropdown {
    clear(): void;
    selectCurrent(): void;
    nextRow(): void;
    prevRow(): void;
    highlightRow(index: number | null): void;
}
export class CtrCompleter {
    selected: EventEmitter<CompleterItem | null>;
    highlighted: EventEmitter<CompleterItem | null>;
    opened: EventEmitter<boolean>;
    dataSourceChange: EventEmitter<void>;
    private list;
    private dropdown;
    private _hasHighlighted;
    private _hasSelected;
    private _cancelBlur;
    private _isOpen;
    private _autoHighlightIndex;
    registerList(list: CompleterList): void;
    registerDropdown(dropdown: CompleterDropdown | null): void;
    onHighlighted(item: CompleterItem | null): void;
    onSelected(item: CompleterItem, clearList?: boolean): void;
    onDataSourceChange(): void;
    search(term: string): void;
    clear(): void;
    selectCurrent(): void;
    nextRow(): void;
    prevRow(): void;
    hasHighlighted(): boolean;
    cancelBlur(cancel: boolean): void;
    isCancelBlur(): boolean;
    open(): void;
    isOpen: boolean;
    autoHighlightIndex: number | null;
    readonly hasSelected: boolean;
}
}
declare module 'ng2-completer/directives/ctr-completer' {
export * from '~ng2-completer/directives/ctr-completer';
}

// Generated by typings
// Source: node_modules/ng2-completer/directives/ctr-dropdown.d.ts
declare module '~ng2-completer/directives/ctr-dropdown' {
import { AfterViewInit, ElementRef, OnDestroy } from '@angular/core';
import { CompleterItem } from '~ng2-completer/components/completer-item';
import { CtrCompleter, CompleterDropdown } from '~ng2-completer/directives/ctr-completer';
export interface CtrRowElement {
    setHighlighted(selected: boolean): void;
    getNativeElement(): any;
    getDataItem(): CompleterItem;
}
export class CtrRowItem {
    row: CtrRowElement;
    index: number;
    constructor(row: CtrRowElement, index: number);
}
export class CtrDropdown implements CompleterDropdown, OnDestroy, AfterViewInit {
    private completer;
    private el;
    private rows;
    private currHighlighted;
    private isScrollOn;
    private _rowMouseDown;
    constructor(completer: CtrCompleter, el: ElementRef);
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    onMouseDown(event: any): void;
    registerRow(row: CtrRowItem): void;
    unregisterRow(rowIndex: number): void;
    highlightRow(index: number | null): void;
    clear(): void;
    onSelected(item: CompleterItem): void;
    rowMouseDown(): void;
    selectCurrent(): void;
    nextRow(): void;
    prevRow(): void;
    private dropdownScrollTopTo(offset);
    private dropdownRowTop();
    private dropdownHeight();
    private dropdownRowOffsetHeight(row);
}
}
declare module 'ng2-completer/directives/ctr-dropdown' {
export * from '~ng2-completer/directives/ctr-dropdown';
}

// Generated by typings
// Source: node_modules/ng2-completer/directives/ctr-input.d.ts
declare module '~ng2-completer/directives/ctr-input' {
import { ElementRef, EventEmitter } from '@angular/core';
import { NgModel } from '@angular/forms';
import { CtrCompleter } from '~ng2-completer/directives/ctr-completer';
export class CtrInput {
    private completer;
    private ngModel;
    private el;
    clearSelected: boolean;
    clearUnselected: boolean;
    overrideSuggested: boolean;
    fillHighlighted: boolean;
    openOnFocus: boolean;
    openOnClick: boolean;
    selectOnClick: boolean;
    ngModelChange: EventEmitter<any>;
    private _searchStr;
    private _displayStr;
    private blurTimer;
    constructor(completer: CtrCompleter, ngModel: NgModel, el: ElementRef);
    keyupHandler(event: any): void;
    pasteHandler(event: any): void;
    keydownHandler(event: any): void;
    onBlur(event: any): void;
    onfocus(): void;
    onClick(event: any): void;
    searchStr: string;
    private handleSelection();
    private restoreSearchValue();
    private doBlur();
}
}
declare module 'ng2-completer/directives/ctr-input' {
export * from '~ng2-completer/directives/ctr-input';
}

// Generated by typings
// Source: node_modules/ng2-completer/directives/ctr-list.d.ts
declare module '~ng2-completer/directives/ctr-list' {
import 'rxjs/add/observable/timer';
import { ChangeDetectorRef, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';
import 'rxjs/add/operator/retryWhen';
import 'rxjs/add/operator/do';
import { CtrCompleter, CompleterList } from '~ng2-completer/directives/ctr-completer';
import { CompleterData } from '~ng2-completer/services/completer-data';
import { CompleterItem } from '~ng2-completer/components/completer-item';
export class CtrListContext {
    results: CompleterItem[] | null;
    searching: boolean;
    searchInitialized: boolean;
    isOpen: boolean;
    constructor(results: CompleterItem[] | null, searching: boolean, searchInitialized: boolean, isOpen: boolean);
}
export class CtrList implements OnInit, CompleterList {
    private completer;
    private templateRef;
    private viewContainer;
    private cd;
    ctrListMinSearchLength: number;
    ctrListPause: number;
    ctrListAutoMatch: boolean;
    ctrListAutoHighlight: boolean;
    ctrListDisplaySearching: boolean;
    private _dataService;
    private term;
    private searchTimer;
    private clearTimer;
    private ctx;
    private _initialValue;
    private viewRef;
    constructor(completer: CtrCompleter, templateRef: TemplateRef<CtrListContext>, viewContainer: ViewContainerRef, cd: ChangeDetectorRef);
    ngOnInit(): void;
    dataService: CompleterData;
    initialValue: any;
    search(term: string): void;
    clear(): void;
    open(): void;
    isOpen(open: boolean): void;
    private _clear();
    private searchTimerComplete(term);
    private refreshTemplate();
    private getBestMatchIndex();
    private dataServiceSubscribe();
}
}
declare module 'ng2-completer/directives/ctr-list' {
export * from '~ng2-completer/directives/ctr-list';
}

// Generated by typings
// Source: node_modules/ng2-completer/directives/ctr-row.d.ts
declare module '~ng2-completer/directives/ctr-row' {
import { ElementRef, Renderer, OnDestroy } from '@angular/core';
import { CompleterItem } from '~ng2-completer/components/completer-item';
import { CtrDropdown, CtrRowElement } from '~ng2-completer/directives/ctr-dropdown';
export class CtrRow implements CtrRowElement, OnDestroy {
    private el;
    private renderer;
    private dropdown;
    private selected;
    private _rowIndex;
    private _item;
    constructor(el: ElementRef, renderer: Renderer, dropdown: CtrDropdown);
    ngOnDestroy(): void;
    ctrRow: number;
    dataItem: CompleterItem;
    onClick(event: any): void;
    onMouseEnter(event: any): void;
    onMouseDown(event: any): void;
    setHighlighted(selected: boolean): void;
    getNativeElement(): any;
    getDataItem(): CompleterItem;
}
}
declare module 'ng2-completer/directives/ctr-row' {
export * from '~ng2-completer/directives/ctr-row';
}

// Generated by typings
// Source: node_modules/ng2-completer/index.d.ts
declare module '~ng2-completer/index' {
export { Ng2CompleterModule } from '~ng2-completer/ng2-completer.module';
export { CompleterCmp } from '~ng2-completer/components/completer-cmp';
export { CompleterListItemCmp } from '~ng2-completer/components/completer-list-item-cmp';
export { CompleterService } from '~ng2-completer/services/completer-service';
export { CompleterData } from '~ng2-completer/services/completer-data';
export { localDataFactory, LocalDataFactoryProvider, remoteDataFactory, RemoteDataFactoryProvider } from '~ng2-completer/services/completer-data-factory';
export { CompleterItem } from '~ng2-completer/components/completer-item';
export { LocalData } from '~ng2-completer/services/local-data';
export { RemoteData } from '~ng2-completer/services/remote-data';
export { CompleterBaseData } from '~ng2-completer/services/completer-base-data';
export { CtrCompleter } from '~ng2-completer/directives/ctr-completer';
export { CtrDropdown } from '~ng2-completer/directives/ctr-dropdown';
export { CtrInput } from '~ng2-completer/directives/ctr-input';
export { CtrList } from '~ng2-completer/directives/ctr-list';
export { CtrRow } from '~ng2-completer/directives/ctr-row';
}
declare module 'ng2-completer/index' {
export * from '~ng2-completer/index';
}
declare module 'ng2-completer' {
export * from '~ng2-completer/index';
}
